// Generated by gencpp from file map_maker/MapTalkResponse.msg
// DO NOT EDIT!


#ifndef MAP_MAKER_MESSAGE_MAPTALKRESPONSE_H
#define MAP_MAKER_MESSAGE_MAPTALKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace map_maker
{
template <class ContainerAllocator>
struct MapTalkResponse_
{
  typedef MapTalkResponse_<ContainerAllocator> Type;

  MapTalkResponse_()
    : category_list()
    , x_list()
    , y_list()
    , z_list()
    , num_IDs(0)
    , adjacency_array()  {
    }
  MapTalkResponse_(const ContainerAllocator& _alloc)
    : category_list(_alloc)
    , x_list(_alloc)
    , y_list(_alloc)
    , z_list(_alloc)
    , num_IDs(0)
    , adjacency_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _category_list_type;
  _category_list_type category_list;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _x_list_type;
  _x_list_type x_list;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _y_list_type;
  _y_list_type y_list;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _z_list_type;
  _z_list_type z_list;

   typedef int16_t _num_IDs_type;
  _num_IDs_type num_IDs;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _adjacency_array_type;
  _adjacency_array_type adjacency_array;




  typedef boost::shared_ptr< ::map_maker::MapTalkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_maker::MapTalkResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MapTalkResponse_

typedef ::map_maker::MapTalkResponse_<std::allocator<void> > MapTalkResponse;

typedef boost::shared_ptr< ::map_maker::MapTalkResponse > MapTalkResponsePtr;
typedef boost::shared_ptr< ::map_maker::MapTalkResponse const> MapTalkResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_maker::MapTalkResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_maker::MapTalkResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace map_maker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'map_maker': ['/home/crazyflier/flyingcars/catkin_ws/src/map_maker/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::map_maker::MapTalkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_maker::MapTalkResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_maker::MapTalkResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_maker::MapTalkResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_maker::MapTalkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_maker::MapTalkResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_maker::MapTalkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6fe7530d7a5e37ff441ff3304b9b549d";
  }

  static const char* value(const ::map_maker::MapTalkResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6fe7530d7a5e37ffULL;
  static const uint64_t static_value2 = 0x441ff3304b9b549dULL;
};

template<class ContainerAllocator>
struct DataType< ::map_maker::MapTalkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_maker/MapTalkResponse";
  }

  static const char* value(const ::map_maker::MapTalkResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_maker::MapTalkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] category_list\n\
uint16[] x_list\n\
uint16[] y_list\n\
uint16[] z_list\n\
int16 num_IDs\n\
uint16[] adjacency_array\n\
\n\
\n\
";
  }

  static const char* value(const ::map_maker::MapTalkResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_maker::MapTalkResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.category_list);
      stream.next(m.x_list);
      stream.next(m.y_list);
      stream.next(m.z_list);
      stream.next(m.num_IDs);
      stream.next(m.adjacency_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MapTalkResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_maker::MapTalkResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_maker::MapTalkResponse_<ContainerAllocator>& v)
  {
    s << indent << "category_list[]" << std::endl;
    for (size_t i = 0; i < v.category_list.size(); ++i)
    {
      s << indent << "  category_list[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.category_list[i]);
    }
    s << indent << "x_list[]" << std::endl;
    for (size_t i = 0; i < v.x_list.size(); ++i)
    {
      s << indent << "  x_list[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.x_list[i]);
    }
    s << indent << "y_list[]" << std::endl;
    for (size_t i = 0; i < v.y_list.size(); ++i)
    {
      s << indent << "  y_list[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.y_list[i]);
    }
    s << indent << "z_list[]" << std::endl;
    for (size_t i = 0; i < v.z_list.size(); ++i)
    {
      s << indent << "  z_list[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.z_list[i]);
    }
    s << indent << "num_IDs: ";
    Printer<int16_t>::stream(s, indent + "  ", v.num_IDs);
    s << indent << "adjacency_array[]" << std::endl;
    for (size_t i = 0; i < v.adjacency_array.size(); ++i)
    {
      s << indent << "  adjacency_array[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.adjacency_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_MAKER_MESSAGE_MAPTALKRESPONSE_H
